name: Auto Release with Changesets

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changesets: ${{ steps.check-changesets.outputs.has-changesets }}
      should-release: ${{ steps.should-release.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need to compare with previous commit

      - name: Check for changeset files
        id: check-changesets
        run: |
          if [ -d ".changeset" ] && [ "$(find .changeset -name "*.md" -not -name "README.md" | wc -l)" -gt 0 ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
            echo "Found changeset files:"
            find .changeset -name "*.md" -not -name "README.md"
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
            echo "No changeset files found"
          fi

      - name: Check if should release
        id: should-release
        run: |
          # Release if:
          # 1. Triggered manually (workflow_dispatch)
          # 2. Push to main with changesets
          # 3. Version in package.json was bumped in this push
          
          SHOULD_RELEASE=false
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger detected"
            SHOULD_RELEASE=true
          elif [ "${{ steps.check-changesets.outputs.has-changesets }}" = "true" ]; then
            echo "Changesets found, should release"
            SHOULD_RELEASE=true
          else
            # Check if package.json version changed in the last commit
            if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
              VERSION_CHANGED=$(git diff HEAD~1 HEAD package.json | grep -c '"version"' || true)
              if [ "$VERSION_CHANGED" -gt 0 ]; then
                echo "Package.json version changed, should release"
                SHOULD_RELEASE=true
              fi
            fi
          fi
          
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "Should release: $SHOULD_RELEASE"

  auto-release:
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: npm test

      - name: Determine version type
        id: version-type
        run: |
          VERSION_TYPE="${{ inputs.version_type || 'auto' }}"
          echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Using version type: $VERSION_TYPE"
        outputs:
          version-type: ${{ steps.version-type.outputs.version-type }}

      - name: Process changesets and create release
        id: changeset-release
        run: |
          echo "Processing changesets with version type: ${{ steps.version-type.outputs.version-type }}"
          
          # Determine which command to run based on version type
          VERSION_TYPE="${{ steps.version-type.outputs.version-type }}"
          if [ "$VERSION_TYPE" = "auto" ]; then
            echo "Running auto-detected changeset release..."
            if npm run | grep -q "changeset:full-release-auto"; then
              npm run changeset:full-release-auto
            else
              echo "Error: changeset:full-release-auto script not found in package.json"
              exit 1
            fi
          else
            echo "Running manual changeset release with type: $VERSION_TYPE"
            bash ./scripts/changelog-manager.sh -c full-release -t "$VERSION_TYPE"
          fi
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Check if version changed
        id: version-check
        run: |
          # Check if there are any changes to commit
          if git diff --staged --quiet && git diff --quiet; then
            echo "version-changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected, skipping tag creation"
          else
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected, will create tag"
          fi

      - name: Commit changes and create tag
        if: steps.version-check.outputs.version-changed == 'true'
        id: commit-and-tag
        run: |
          NEW_VERSION="${{ steps.changeset-release.outputs.new-version }}"
          
          # Add all changes
          git add -A
          
          # Commit if there are staged changes
          if ! git diff --staged --quiet; then
            git commit -m "chore: release v$NEW_VERSION [skip ci]"
            echo "Changes committed"
          fi
          
          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "tag-created=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Tag v$NEW_VERSION created and pushed"

      - name: Release Summary
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          echo "## 🚀 Auto-Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.changeset-release.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.commit-and-tag.outputs.tag-created }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Processed changesets" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Updated CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bumped version in package.json" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Created and pushed git tag" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Triggered release workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "The tag push will automatically trigger the release workflow which will:" >> $GITHUB_STEP_SUMMARY
          echo "- Build and package the VSIX file" >> $GITHUB_STEP_SUMMARY
          echo "- Create a GitHub release with changelog notes" >> $GITHUB_STEP_SUMMARY
          echo "- Attach the VSIX file to the release" >> $GITHUB_STEP_SUMMARY

      - name: No Release Summary
        if: steps.version-check.outputs.version-changed == 'false'
        run: |
          echo "## ℹ️ No Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** No changes detected after processing changesets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This could happen if:" >> $GITHUB_STEP_SUMMARY
          echo "- No changeset files were found" >> $GITHUB_STEP_SUMMARY
          echo "- Changesets were already processed" >> $GITHUB_STEP_SUMMARY
          echo "- Version is already up to date" >> $GITHUB_STEP_SUMMARY

  skip-release:
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should-release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip Release Summary
        run: |
          echo "## ⏭️ Release Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** No conditions met for automatic release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Conditions" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ No changeset files found" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ No version bump detected in package.json" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Not manually triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### To Create a Release" >> $GITHUB_STEP_SUMMARY
          echo "1. Create a changeset: \`npm run changeset:create\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Push changes to main branch" >> $GITHUB_STEP_SUMMARY
          echo "3. Or trigger manually via GitHub Actions UI" >> $GITHUB_STEP_SUMMARY
