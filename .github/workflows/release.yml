name: Unified Release Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (for manual changeset processing)'
        required: false
        default: 'auto' # 'auto' will use changeset:full-release-auto
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      skip_tests_before_versioning:
        description: 'Skip tests before versioning (not recommended)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read # Needed if changesets interacts with PRs, good to have

jobs:
  version_and_tag:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version-check.outputs.version-changed }}
      new_version: ${{ steps.changeset-process.outputs.new-version }}
      new_tag_name: ${{ steps.commit-and-tag.outputs.tag-created }}
      has_changesets: ${{ steps.check-changesets.outputs.has-changesets }}
      should_process_changesets: ${{ steps.should-process.outputs.should-process-changesets }}
    steps:
      - name: Checkout code (for versioning)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changesets and git diff
          token: ${{ secrets.GITHUB_TOKEN }} # To allow pushing changes

      - name: Check for changeset files
        id: check-changesets
        run: |
          if [ -d ".changeset" ] && [ "$(find .changeset -name "*.md" -not -name "README.md" | wc -l)" -gt 0 ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
            echo "Found changeset files."
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
            echo "No changeset files found."
          fi

      - name: Determine if changesets should be processed
        id: should-process
        run: |
          SHOULD_PROCESS_CHANGESETS=false
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger detected, will process changesets."
            SHOULD_PROCESS_CHANGESETS=true
          elif [ "${{ steps.check-changesets.outputs.has-changesets }}" = "true" ]; then
            echo "Changesets found on push to main, will process."
            SHOULD_PROCESS_CHANGESETS=true
          else
            echo "No changesets to process for this event."
          fi
          echo "should-process-changesets=$SHOULD_PROCESS_CHANGESETS" >> $GITHUB_OUTPUT

      - name: Setup Node.js (for versioning)
        if: steps.should-process.outputs.should-process-changesets == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (for versioning)
        if: steps.should-process.outputs.should-process-changesets == 'true'
        run: npm ci

      - name: Configure Git
        if: steps.should-process.outputs.should-process-changesets == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Versioning)"      - name: Run tests before versioning (optional)
        if: steps.should-process.outputs.should-process-changesets == 'true' && inputs.skip_tests_before_versioning != true && github.event_name == 'workflow_dispatch'
        run: npm test # Consider if xvfb is needed here or if tests are robust without it

      - name: Process changesets and update version/changelog
        if: steps.should-process.outputs.should-process-changesets == 'true'
        id: changeset-process
        env:
          MANUAL_VERSION_TYPE: ${{ inputs.version_type }}
        run: |
          set -e
          echo "Processing changesets..."
          VERSION_TYPE_TO_USE="$MANUAL_VERSION_TYPE"
          if [ "${{ github.event_name }}" != "workflow_dispatch" ] || [ "$MANUAL_VERSION_TYPE" = "auto" ]; then
            echo "Running auto-detected changeset release (npm run changeset:full-release-auto)"
            npm run changeset:full-release-auto
          else
            echo "Running manual changeset release with type: $VERSION_TYPE_TO_USE (bash ./scripts/changelog-manager.sh)"
            bash ./scripts/changelog-manager.sh -c full-release -t "$VERSION_TYPE_TO_USE"
          fi
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version determined: $NEW_VERSION"

      - name: Check if version/changelog changed
        if: steps.should-process.outputs.should-process-changesets == 'true'
        id: version-check
        run: |
          set -e
          # Check if there are any uncommitted changes (package.json, CHANGELOG.md, .changeset files)
          if git diff --quiet && git diff --staged --quiet; then
            echo "version-changed=false" >> $GITHUB_OUTPUT
            echo "No changes to commit after changeset processing."
          else
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "Version/changelog changes detected."
          fi

      - name: Commit version and changelog changes, and create tag
        if: steps.version-check.outputs.version-changed == 'true'
        id: commit-and-tag
        run: |
          set -e
          NEW_VERSION="${{ steps.changeset-process.outputs.new-version }}"
          TAG_NAME="v$NEW_VERSION"
          
          git add -A # Add all changes (package.json, CHANGELOG.md, consumed .changeset files)
          git commit -m "chore: release $TAG_NAME [skip ci]"
          echo "Changes committed."
          
          git tag "$TAG_NAME"
          echo "Tag $TAG_NAME created."
          
          # Push commit and tag
          # Retry push in case of temporary network issues or race conditions
          for i in 1 2 3; do
            git push origin main && git push origin "$TAG_NAME" && break
            echo "Push attempt $i failed. Retrying in 5 seconds..."
            sleep 5
          done

          echo "tag-created=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Commit and tag $TAG_NAME pushed to origin."
      
      - name: Versioning Summary
        if: steps.should-process.outputs.should-process-changesets == 'true'
        run: |
          echo "## 📝 Versioning & Tagging Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.version-check.outputs.version-changed }}" = "true" ]; then
            echo "- ✅ Version bumped to: ${{ steps.changeset-process.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Tag created: ${{ steps.commit-and-tag.outputs.tag-created }}" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Changes committed and pushed." >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ No version changes made or no changesets to process." >> $GITHUB_STEP_SUMMARY
          fi

  build_and_publish:
    needs: version_and_tag
    # Only run if versioning job actually created a tag and changesets were processed
    if: needs.version_and_tag.outputs.version_changed == 'true' && needs.version_and_tag.outputs.should_process_changesets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code at new tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_and_tag.outputs.new_tag_name }}
          fetch-depth: 0 # Full history for changelog extraction (though it's already updated)

      - name: Setup Node.js (for build & publish)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (for build & publish)
        run: npm ci

      - name: Install xvfb
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Run linting
        run: npm run lint

      - name: Type checking
        run: npm run check-types

      - name: Run tests (on tagged commit)
        run: xvfb-run --auto-servernum npm test

      - name: Install VSCE
        run: npm install -g vsce

      - name: Build VSIX package
        id: build-vsix
        run: |
          set -e
          vsce package
          VSIX_FILE=$(find . -name "*.vsix" -type f | head -n 1)
          if [ -z "$VSIX_FILE" ]; then
            echo "Error: No VSIX file found after packaging"
            exit 1
          fi
          echo "vsix_file_path=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "vsix_file_name=$(basename $VSIX_FILE)" >> $GITHUB_OUTPUT
          echo "VSIX packaged: $VSIX_FILE"

      - name: Extract release notes from CHANGELOG.md
        id: changelog-notes
        env:
          PACKAGE_VERSION: ${{ needs.version_and_tag.outputs.new_version }}
        run: |
          set -e
          echo "Extracting release notes for version $PACKAGE_VERSION from CHANGELOG.md"
          # Create a script to extract the changelog section
          cat > extract_changelog.js << 'EOF'
          const fs = require('fs');
          const version = process.env.PACKAGE_VERSION; // Read from env

          try {
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
            const versionPattern = new RegExp(`## \\[${version.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\].*?\\n`);
            const match = changelog.match(versionPattern);
            
            if (match) {
              const startIndex = changelog.indexOf(match[0]);
              const afterVersionLine = startIndex + match[0].length;
              const nextVersionPattern = /\n## \[/;
              const nextMatch = changelog.slice(afterVersionLine).match(nextVersionPattern);
              let endIndex = nextMatch ? (afterVersionLine + nextMatch.index) : changelog.length;
              const releaseNotes = changelog.slice(afterVersionLine, endIndex).trim()
                                      .replace(/\n\n+/g, '\n\n')
                                      .replace(/^\n+/, '')
                                      .replace(/\n+$/, '');
              console.log(releaseNotes); // Output for GITHUB_OUTPUT
            } else {
              console.log(`**Release v${version}**\n\nContent for v${version}.`);
            }
          } catch (error) {
            console.error('Error reading changelog:', error);
            console.log(`**Release v${version}**\n\nError extracting notes for v${version}.`);
          }
          EOF
          
          NOTES_CONTENT=$(node extract_changelog.js)
          # Escape for multiline output
          NOTES_CONTENT="${NOTES_CONTENT//'%'/'%25'}"
          NOTES_CONTENT="${NOTES_CONTENT//$'\n'/'%0A'}"
          NOTES_CONTENT="${NOTES_CONTENT//$'\r'/'%0D'}"
          echo "notes=$NOTES_CONTENT" >> $GITHUB_OUTPUT
          echo "Release notes extracted."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.build-vsix.outputs.vsix_file_path }}
          body: ${{ steps.changelog-notes.outputs.notes }}
          name: "Release ${{ needs.version_and_tag.outputs.new_version }}" # Use consistent version
          tag_name: ${{ needs.version_and_tag.outputs.new_tag_name }}
          draft: false
          prerelease: false
          generate_release_notes: false # We are providing our own
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check VSCE_PAT availability
        id: check_vsce_pat
        run: |
          if [ -n "${{ secrets.VSCE_PAT }}" ]; then
            echo "VSCE_PAT is set."
            echo "is_set=true" >> $GITHUB_OUTPUT
          else
            echo "VSCE_PAT is NOT set."
            echo "is_set=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Publish to VS Code Marketplace
        if: steps.check_vsce_pat.outputs.is_set == 'true'
        run: vsce publish -p ${{ secrets.VSCE_PAT }} --packagePath ${{ steps.build-vsix.outputs.vsix_file_path }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Final Release Summary
        run: |
          set -e
          echo "## 🚀 Build & Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Released:** ${{ needs.version_and_tag.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.version_and_tag.outputs.new_tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**VSIX:** ${{ steps.build-vsix.outputs.vsix_file_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Files & Publishing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ VSIX package built: ${{ steps.build-vsix.outputs.vsix_file_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Release created/updated for tag ${{ needs.version_and_tag.outputs.new_tag_name }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ secrets.VSCE_PAT }}" ]; then
            echo "- ✅ VSIX package published to VS Code Marketplace" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ VSIX package NOT published to VS Code Marketplace (VSCE_PAT secret not found)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- ✅ Release notes extracted from CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.version_and_tag.outputs.new_tag_name }})" >> $GITHUB_STEP_SUMMARY
          # Note: Direct download link from summary might be tricky if filename isn't easily predictable or if it's a private repo without token
